% Solve a Time-Series Problem with a Recurrent Neural Network
% Script generated by NFTOOL
% Created Thu Nov 05 22:11:31 SGT 2020
%
% This script assumes these variables are defined:
%
%   i - input time series.
%   t - feedback time series.

inputs = tonndata(i,false,false);
targets = tonndata(t,false,false);

% Create a Recurrent Network with parameters
feedbackDelays = 1:2;
hiddenLayerSize = 20;
net = layrecnet(feedbackDelays,hiddenLayerSize);

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network.
[Xs,Xi,Ai,Ts] = preparets(net, inputs, targets);
%net = train(net,Xs,Ts,Xi,Ai);
net.divideFcn = 'dividerand';  % Divide data randomly
% The property DIVIDEMODE set to TIMESTEP means that targets are divided
% into training, validation and test sets according to timesteps.
% For a list of data division modes type: help nntype_data_division_mode
net.divideMode = 'value';  % Divide up every value
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 10/100;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% Customize training parameters at: net.trainParam
net.trainFcn = 'trainlm';  % Levenberg-Marquardt
 
% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
% Customize performance parameters at: net.performParam
net.performFcn = 'mse';  % Mean squared error
 
% Choose Plot Functions
% For a list of all plot functions type: help nnplot
% Customize plot parameters at: net.plotParam
net.plotFcns = {'plotperform','plottrainstate','plotresponse', ...
 % 'ploterrcorr', 'plotinerrcorr'};

% Train the Network
[net,tr] = train(net,Xs,Ts,Xi,Ai);

% Test the Network
%Y = net(Xs,Xi,Ai);
outputs = net(Xs,Xi,Ai);
errors = gsubtract(Ts,Y);
perf = perform(net,Ts, outputs);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotregression(targets,outputs)
%figure, plotresponse(targets,outputs)
%figure, ploterrcorr(errors)
%figure, plotinerrcorr(inputs,errors)


% Change from matrix to nn standard cell
T20 = fromnndata(outputs,true,true,false);
